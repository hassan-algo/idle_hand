package main

import (
	"fmt"
	"os"
	"os/signal"

	"example.com/apis"
	"example.com/business"
	"example.com/db"
	_ "example.com/docs" // docs is generated by Swag CLI, you have to import it.
	"example.com/handlers"
	"example.com/routes"
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	echoSwagger "github.com/swaggo/echo-swagger" // echo-swagger middleware
)

// @title Swagger Example API
// @version 1.0
// @description This is a sample server Petstore server.
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @BasePath /
// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
// @description "Bearer token"

func main() {

	e := echo.New()

	postgres := db.NewDatabaseConnection()

	authAPI := apis.NewAUTH("/auth",
		postgres,
		routes.NewAuthRoutes(),
		handlers.NewAuthHandler(),
		business.NewAuthBusiness(), e)
	apis.NewAPI("/catalog",
		postgres,
		routes.NewCatalogRoutes(),
		handlers.NewCatalogHandler(),
		business.NewCatalogBusiness(), e, authAPI)
	// Serve the Swagger UI
	e.GET("/swagger/*", echoSwagger.WrapHandler)

	e.Use(middleware.CORS())

	config := middleware.CORSConfig{
		AllowOrigins: []string{"*"},
		AllowMethods: []string{echo.GET, echo.PUT, echo.POST, echo.DELETE},
	}

	e.Use(middleware.CORSWithConfig(config))

	sigChannel := make(chan os.Signal)
	signal.Notify(sigChannel, os.Interrupt)
	signal.Notify(sigChannel, os.Kill)
	go func() {
		e.Start(":5006")
	}()

	<-sigChannel
	if sqlDB, err := postgres.Con.DB(); err == nil {
		sqlDB.Close()
	}
	fmt.Println("Database connection closed!")

}
