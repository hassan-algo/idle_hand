// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register new user",
                "parameters": [
                    {
                        "description": "Register user",
                        "name": "profile",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.MyAuth"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.Response"
                        }
                    }
                }
            }
        },
        "/business_policies": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get all business policies",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "business_policies"
                ],
                "summary": "Get all business policies",
                "responses": {
                    "200": {
                        "description": "business_policies",
                        "schema": {
                            "$ref": "#/definitions/structs.BusinessPolicies"
                        }
                    },
                    "400": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update an existing business policy with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "business_policies"
                ],
                "summary": "Update a business policy",
                "parameters": [
                    {
                        "description": "Business Policy Object",
                        "name": "business_policy",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.BusinessPolicies"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "updated business policy",
                        "schema": {
                            "$ref": "#/definitions/structs.BusinessPolicies"
                        }
                    },
                    "400": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new business policy with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "business_policies"
                ],
                "summary": "Create a new business policy",
                "parameters": [
                    {
                        "description": "Business Policy Object",
                        "name": "business_policy",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.BusinessPolicies"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "created business policy",
                        "schema": {
                            "$ref": "#/definitions/structs.BusinessPolicies"
                        }
                    },
                    "400": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a business policy by its GUID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "business_policies"
                ],
                "summary": "Delete a business policy",
                "parameters": [
                    {
                        "description": "Business Policy Object with GUID",
                        "name": "business_policy",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.BusinessPolicies"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "deleted business policy",
                        "schema": {
                            "$ref": "#/definitions/structs.BusinessPolicies"
                        }
                    },
                    "400": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/business_policies/multi": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create multiple business policies at once",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "business_policies"
                ],
                "summary": "Multiple business policies creation",
                "responses": {
                    "200": {
                        "description": "MULTIPOST BusinessPolicies",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/business_policies/{business_policies_guid}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get a specific business policy by its GUID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "business_policies"
                ],
                "summary": "Get business policy by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Business Policy GUID",
                        "name": "business_policies_guid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "business policy",
                        "schema": {
                            "$ref": "#/definitions/structs.BusinessPolicies"
                        }
                    },
                    "400": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/catalog": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "catalog"
                ],
                "summary": "Get catalog",
                "responses": {
                    "200": {
                        "description": "catalog",
                        "schema": {
                            "$ref": "#/definitions/structs.Catalog"
                        }
                    }
                }
            }
        },
        "/catalog_availability": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get all catalog availabilities",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "catalog_availability"
                ],
                "summary": "Get all catalog availabilities",
                "responses": {
                    "200": {
                        "description": "catalog_availability",
                        "schema": {
                            "$ref": "#/definitions/structs.CatalogAvailability"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new catalog availability with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "catalog_availability"
                ],
                "summary": "Create a new catalog availability",
                "parameters": [
                    {
                        "description": "Catalog Availability Object",
                        "name": "catalog_availability",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.CatalogAvailability"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "created catalog availability",
                        "schema": {
                            "$ref": "#/definitions/structs.CatalogAvailability"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update an existing catalog availability with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "catalog_availability"
                ],
                "summary": "Update a catalog availability",
                "parameters": [
                    {
                        "description": "Catalog Availability Object",
                        "name": "catalog_availability",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.CatalogAvailability"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "updated catalog availability",
                        "schema": {
                            "$ref": "#/definitions/structs.CatalogAvailability"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a catalog availability by its GUID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "catalog_availability"
                ],
                "summary": "Delete a catalog availability",
                "parameters": [
                    {
                        "description": "Catalog Availability Object with GUID",
                        "name": "catalog_availability",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.CatalogAvailability"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "deleted catalog availability",
                        "schema": {
                            "$ref": "#/definitions/structs.CatalogAvailability"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/catalog_availability/multi": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create multiple catalog availabilities at once",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "catalog_availability"
                ],
                "summary": "Multiple catalog availabilities creation",
                "responses": {
                    "501": {
                        "description": "Not Implemented",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/catalog_availability/{catalog_availability_guid}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get a specific catalog availability by its GUID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "catalog_availability"
                ],
                "summary": "Get catalog availability by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Catalog Availability GUID",
                        "name": "catalog_availability_guid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "catalog availability",
                        "schema": {
                            "$ref": "#/definitions/structs.CatalogAvailability"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/offers": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "offers"
                ],
                "summary": "Get offers",
                "responses": {
                    "200": {
                        "description": "offers",
                        "schema": {
                            "$ref": "#/definitions/structs.Offers"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "structs.BusinessPolicies": {
            "type": "object",
            "properties": {
                "booking_deposite_percentage": {
                    "type": "integer"
                },
                "booking_polices": {
                    "type": "string"
                },
                "booking_terms": {
                    "type": "string"
                },
                "business_guid": {
                    "type": "string"
                },
                "business_policies_guid": {
                    "type": "string"
                },
                "cancellation_amount": {
                    "type": "integer"
                },
                "cancellation_hours": {
                    "type": "integer"
                },
                "catalog_guid": {
                    "type": "string"
                },
                "no_show_fee": {
                    "type": "integer"
                }
            }
        },
        "structs.Catalog": {
            "type": "object",
            "properties": {
                "assigned_staff_guid": {
                    "type": "string"
                },
                "business_guid": {
                    "type": "string"
                },
                "catalog_category": {
                    "type": "string"
                },
                "catalog_description": {
                    "type": "string"
                },
                "catalog_guid": {
                    "type": "string"
                },
                "catalog_name": {
                    "type": "string"
                },
                "catalog_offering": {
                    "type": "string"
                },
                "catalog_photo": {
                    "type": "string"
                },
                "catalog_price": {
                    "type": "string"
                }
            }
        },
        "structs.CatalogAvailability": {
            "type": "object",
            "properties": {
                "accept_same_day_booking": {
                    "type": "number",
                    "format": "float64"
                },
                "buffer_per_appointment": {
                    "type": "number",
                    "format": "float64"
                },
                "business_guid": {
                    "type": "string"
                },
                "catalog_availability_guid": {
                    "type": "string"
                },
                "catalog_guid": {
                    "type": "string"
                },
                "day_of_week": {
                    "type": "string"
                },
                "hours_per_day": {
                    "type": "number",
                    "format": "float64"
                },
                "number_of_breaks": {
                    "type": "number",
                    "format": "float64"
                },
                "slots_per_day": {
                    "type": "string"
                },
                "time_per_break": {
                    "type": "string"
                }
            }
        },
        "structs.MyAuth": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "structs.Offers": {
            "type": "object",
            "properties": {
                "business_guid": {
                    "type": "string"
                },
                "customer_type": {
                    "type": "string"
                },
                "medium": {
                    "type": "integer"
                },
                "offer_guid": {
                    "type": "string"
                },
                "offer_message": {
                    "type": "string"
                },
                "offer_title": {
                    "type": "string"
                }
            }
        },
        "structs.Response": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                },
                "status_code": {
                    "type": "integer"
                },
                "valid": {
                    "type": "boolean"
                }
            }
        },
        "ErrorResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "error": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "\"Bearer token\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Swagger Example API",
	Description:      "This is a sample server Petstore server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
